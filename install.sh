#!/usr/bin/env bash
set -euo pipefail

# Defaults (override with flags)
SLACK_WEBHOOK=""
SLACK_CHANNEL=""
THRESHOLD="75"
DIR_MAX_GB="8"                # capacity for /var/log/audit if it is NOT a dedicated partition
SYSTEM_TAG="$(hostname -f)"
ENABLE_TIMER=true
DRY_RUN=false
FORCE=false

usage() {
  cat <<USAGE
Usage: sudo ./install.sh --webhook URL [options]

Required:
  --webhook URL               Slack Incoming Webhook URL

Optional:
  --channel '#alerts'         Slack channel (if your webhook isn't channel-bound)
  --threshold 75              Alert threshold percent (default: 75)
  --dir-max-gb 8              Max GB allowed for /var/log/audit if not dedicated partition (default: 8)
  --system-tag TAG            Host tag in messages (default: hostname -f)
  --no-enable                 Install but do not enable/start the systemd timer
  --dry-run                   Show actions without changing the system
  --force                     Overwrite existing files
  -h, --help                  Show this help

Examples:
  sudo ./install.sh --webhook https://hooks.slack.com/services/XXX/YYY/ZZZ
  sudo ./install.sh --webhook https://... --channel '#security-alerts' --threshold 80 --dir-max-gb 12
USAGE
}

# Parse args
while [[ $# -gt 0 ]]; do
  case "$1" in
    --webhook)       SLACK_WEBHOOK="$2"; shift 2 ;;
    --channel)       SLACK_CHANNEL="$2"; shift 2 ;;
    --threshold)     THRESHOLD="$2"; shift 2 ;;
    --dir-max-gb)    DIR_MAX_GB="$2"; shift 2 ;;
    --system-tag)    SYSTEM_TAG="$2"; shift 2 ;;
    --no-enable)     ENABLE_TIMER=false; shift ;;
    --dry-run)       DRY_RUN=true; shift ;;
    --force)         FORCE=true; shift ;;
    -h|--help)       usage; exit 0 ;;
    *) echo "Unknown option: $1"; usage; exit 1 ;;
  esac
done

if [[ -z "$SLACK_WEBHOOK" ]]; then
  echo "ERROR: --webhook is required."; usage; exit 1
fi

if [[ $EUID -ne 0 ]]; then
  echo "Please run as root (sudo)." >&2; exit 1
fi

# Paths
SRC_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BIN_DST="/usr/local/bin/check-audit-usage.sh"
CONF_DST="/etc/audit-repo-monitor.conf"
SVC_DST="/etc/systemd/system/audit-repo-monitor.service"
TMR_DST="/etc/systemd/system/audit-repo-monitor.timer"

# Actions wrapper
doit() {
  if $DRY_RUN; then
    echo "[dry-run] $*"
  else
    eval "$@"
  fi
}

# 1) Install deps (Ubuntu)
if [[ -r /etc/os-release ]]; then
  . /etc/os-release
  if [[ "${ID:-}" == "ubuntu" || "${ID_LIKE:-}" == *debian* ]]; then
    doit "apt-get update -y"
    doit "apt-get install -y jq curl mailutils >/dev/null 2>&1 || true"
  else
    echo "Non-Ubuntu/Debian detected. Ensure 'jq' and 'curl' are installed."
  fi
fi

# 2) Install script
install_file() {
  local src="$1" dst="$2" mode="$3"
  if [[ -e "$dst" && $FORCE == false ]]; then
    echo "Skipping existing $dst (use --force to overwrite)."
  else
    doit "install -m $mode \"$src\" \"$dst\""
  fi
}

install_file "$SRC_DIR/files/check-audit-usage.sh" "$BIN_DST" 0755
install_file "$SRC_DIR/files/audit-repo-monitor.service" "$SVC_DST" 0644
install_file "$SRC_DIR/files/audit-repo-monitor.timer" "$TMR_DST" 0644

# 3) Render config
CONF_TMP="$(mktemp)"
cat >"$CONF_TMP" <<EOF
# Generated by install.sh
AUDIT_PATHS="/var/log/audit"
THRESHOLD=$THRESHOLD

# If /var/log/audit is on a shared partition, use this GB ceiling.
# If it is its own mount, you can comment this out ("DIR_MAX_GB=") and the script will use df%.
DIR_MAX_GB="/var/log/audit:$DIR_MAX_GB"

SLACK_WEBHOOK="$SLACK_WEBHOOK"
SLACK_CHANNEL="$SLACK_CHANNEL"
SYSTEM_TAG="$SYSTEM_TAG"
EOF

if [[ -e "$CONF_DST" && $FORCE == false ]]; then
  echo "Skipping existing $CONF_DST (use --force to overwrite)."
else
  doit "install -m 0644 \"$CONF_TMP\" \"$CONF_DST\""
fi
rm -f "$CONF_TMP"

# 4) systemd reload/enable
doit "systemctl daemon-reload"
if $ENABLE_TIMER; then
  doit "systemctl enable --now audit-repo-monitor.timer"
  echo "Enabled and started: audit-repo-monitor.timer"
else
  echo "Installed but not enabled (per --no-enable)."
fi

echo "Done."
